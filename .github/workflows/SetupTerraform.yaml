# name: Terraform Infrastructure Change Management Pipeline with GitHub Actions
# 'on': [workflow_dispatch]
# env:
#   TF_LOG: INFO
#   AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
#   AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
#   BUCKET_TF_STATE: '${{ secrets.BUCKET_TF_STATE}}'
# jobs:
#   terraform:
#     name: Terraform Infrastructure Change Management
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         shell: bash
#         working-directory: ./tf-infrastructure
#     steps:
#     - name: Checkout the repository to the runner
#       uses: actions/checkout@v2
#     - name: Setup Terraform with specified version on the runner
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.3.0
#     - name: Terraform init
#       id: init
#       run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
#     - name: Terraform format
#       id: fmt
#       run: terraform fmt -check
#     - name: Terraform validate
#       id: validate
#       run: terraform validate
#     - name: Terraform plan
#       id: plan
#       if: github.event_name == 'pull_request'
#       run: terraform plan -no-color -input=false
#       continue-on-error: true
#     - uses: actions/github-script@v6
#       if: github.event_name == 'pull_request'
#       env:
#         PLAN: |-
#           terraform
#           ${{ steps.plan.outputs.stdout }}
#       with:
#         script: "\nconst output = `#### Terraform Format and Style üñå\\`${{ steps.fmt.outcome }}\\`\n\n#### Terraform Initialization ‚öôÔ∏è\\`${{ steps.init.outcome }}\\`\n\n#### Terraform Validation ü§ñ\\`${{ steps.validate.outcome }}\\`\n\n#### Terraform Plan üìñ\\`${{ steps.plan.outcome }}\\`\n\n\n\n<details><summary>Show Plan</summary>\n\n\n\n\\`\\`\\`\\n\n\n${process.env.PLAN}\n\n\\`\\`\\`\n\n\n\n</details>\n\n*Pushed by: @${{ github.actor }}, Action: \\`${{ github.event_name }}\\`*`;\n\n\n\ngithub.rest.issues.createComment({\n\n  issue_number: context.issue.number,\n\n  owner: context.repo.owner,\n\n  repo: context.repo.repo,\n\n  body: output\n\n})\n"
#     - name: Terraform Plan Status
#       if: steps.plan.outcome == 'failure'
#       run: exit 1
#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#       run: terraform apply -auto-approve -input=false

name: Deploy Infrastructure

on: [workflow_dispatch]

jobs:
  tf_fmt:
    name: Deploy Site
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v1

    - name: Terraform Init
      uses: hashicorp/terraform-github-actions/init@v0.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'tf-infrastructure'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      uses: hashicorp/terraform-github-actions/validate@v0.3.7

    - name: Terraform Apply
      uses: hashicorp/terraform-github-actions/apply@v0.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Sync S3
      uses: jakejarvis/s3-sync-action@master
      env:
        SOURCE_DIR: './src'
        AWS_REGION: 'us-east-1'
        AWS_S3_BUCKET: '[BUCKET_NAME_HERE]'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
